name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test & Quality Checks
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Enable Corepack and set Yarn version
        run: |
          corepack enable
          yarn set version 4.1.0
          node --version
          yarn --version
          which yarn

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run ESLint
        run: yarn lint:check

      - name: Check Prettier formatting
        run: yarn format:check

      - name: TypeScript compile check
        run: yarn compile

      - name: Run unit tests
        run: yarn test:unit

      - name: Run integration tests
        run: yarn test:integration

      # VS Code extension tests (headless on Linux)
      - name: Run E2E tests (Linux)
        if: runner.os == 'Linux'
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &
          yarn test:e2e
        env:
          NODE_ENV: test

      - name: Run E2E tests (macOS/Windows)
        if: runner.os != 'Linux'
        run: yarn test:e2e
        env:
          NODE_ENV: test

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run tests with coverage
        run: yarn test:coverage:ci

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run security audit
        run: yarn audit --severity high
        continue-on-error: true

      - name: Check for vulnerabilities
        run: npx audit-ci --config ./audit-ci.json
        continue-on-error: true

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test, coverage, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build extension
        run: yarn compile

      - name: Package extension
        run: yarn vscode:package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-package-${{ runner.os }}
          path: '*.vsix'
          retention-days: 7

  publish:
    name: Publish Extension
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build extension
        run: yarn compile

      - name: Publish to VS Code Marketplace
        run: yarn vscode:publish
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}