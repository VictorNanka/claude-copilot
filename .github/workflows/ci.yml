name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  YARN_VERSION: '4.1.0'

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js with Corepack
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true

      - name: Enable and configure Corepack
        run: |
          echo "🔧 Enabling Corepack..."
          corepack enable
          echo "📦 Corepack version:"
          corepack --version
          echo "🎯 Preparing Yarn ${{ env.YARN_VERSION }}..."
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate
          echo "✅ Yarn version:"
          yarn --version

      - name: Setup Yarn cache
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/unplugged
            .yarn/build-state.yml
            .yarn/install-state.gz
          key: yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-${{ runner.os }}-

      - name: Install dependencies with retry
        run: |
          echo "📦 Installing dependencies..."
          for i in 1 2 3; do
            if yarn install --immutable; then
              echo "✅ Dependencies installed successfully"
              break
            else
              echo "❌ Attempt $i failed, retrying..."
              sleep 5
            fi
          done

      - name: Debug environment
        run: |
          echo "🔍 Environment Debug Info:"
          echo "Node version: $(node --version)"
          echo "Yarn version: $(yarn --version)"
          echo "Package manager: $(cat package.json | grep packageManager || echo 'Not specified')"
          echo "Working directory: $(pwd)"
          echo "Yarn cache dir: $(yarn config get cacheFolder)"

      - name: Run ESLint
        run: |
          if [ "$PACKAGE_MANAGER" = "npm" ]; then
            npm run lint:check
          else
            yarn lint:check
          fi

      - name: Check Prettier formatting
        run: |
          if [ "$PACKAGE_MANAGER" = "npm" ]; then
            npm run format:check
          else
            yarn format:check
          fi

      - name: TypeScript compile check
        run: |
          if [ "$PACKAGE_MANAGER" = "npm" ]; then
            npm run compile
          else
            yarn compile
          fi

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js with Corepack
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true

      - name: Enable and configure Corepack
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Setup Yarn cache
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/unplugged
            .yarn/build-state.yml
            .yarn/install-state.gz
          key: yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-${{ runner.os }}-

      - name: Install dependencies with fallback
        run: |
          echo "📦 Attempting to install with Yarn 4.x..."
          if yarn install --immutable; then
            echo "✅ Yarn installation successful"
            echo "PACKAGE_MANAGER=yarn" >> $GITHUB_ENV
          else
            echo "⚠️ Yarn failed, falling back to npm..."
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi
            echo "✅ npm installation successful"
            echo "PACKAGE_MANAGER=npm" >> $GITHUB_ENV
          fi

      - name: Run unit tests with coverage
        run: |
          if [ "$PACKAGE_MANAGER" = "npm" ]; then
            npm run test:coverage:ci
          else
            yarn test:coverage:ci
          fi

      - name: Upload coverage reports to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js with Corepack
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true

      - name: Enable and configure Corepack
        run: |
          corepack enable
          corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Install dependencies with fallback
        run: |
          if yarn install --immutable; then
            echo "PACKAGE_MANAGER=yarn" >> $GITHUB_ENV
          else
            echo "⚠️ Yarn failed, using npm..."
            npm install
            echo "PACKAGE_MANAGER=npm" >> $GITHUB_ENV
          fi

      - name: Run integration tests
        run: |
          if [ "$PACKAGE_MANAGER" = "npm" ]; then
            npm run test:integration
          else
            yarn test:integration
          fi

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies (npm fallback)
        run: |
          if command -v corepack >/dev/null 2>&1; then
            corepack enable && yarn install --immutable
          else
            npm install
          fi

      - name: Run E2E tests
        run: |
          if command -v yarn >/dev/null 2>&1 && yarn --version | grep -q "^4"; then
            xvfb-run -a yarn test:e2e
          else
            xvfb-run -a npm run test:e2e
          fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies (simple)
        run: npm install

      - name: Run security audit
        run: |
          npm audit --audit-level=high || echo "Audit warnings found but continuing..."

      - name: Check for known vulnerabilities
        run: npx audit-ci --config ./audit-ci.json || echo "Vulnerability check completed with warnings"
        continue-on-error: true

  build:
    name: Build Extension
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, integration-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies with fallback
        run: |
          if command -v corepack >/dev/null 2>&1; then
            corepack enable
            if corepack prepare yarn@${{ env.YARN_VERSION }} --activate && yarn install --immutable; then
              echo "PACKAGE_MANAGER=yarn" >> $GITHUB_ENV
            else
              echo "Yarn failed, using npm..."
              npm install
              echo "PACKAGE_MANAGER=npm" >> $GITHUB_ENV
            fi
          else
            npm install
            echo "PACKAGE_MANAGER=npm" >> $GITHUB_ENV
          fi

      - name: Build extension
        run: |
          if [ "$PACKAGE_MANAGER" = "npm" ]; then
            npm run compile
          else
            yarn compile
          fi

      - name: Package extension
        run: |
          if [ "$PACKAGE_MANAGER" = "npm" ]; then
            npm run vscode:package
          else
            yarn vscode:package
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-package
          path: '*.vsix'

  publish:
    name: Publish Extension
    runs-on: ubuntu-latest
    needs: [build, e2e-tests, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies (simple)
        run: npm install

      - name: Build extension
        run: npm run compile

      - name: Publish to VS Code Marketplace
        run: npm run vscode:publish
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}